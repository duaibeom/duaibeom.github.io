{"type":"data","nodes":[null,{"type":"data","data":[{"prev":1,"next":4,"section":7},{"slug":2,"title":3},"ml\u002Fweights_of_layers","Weights of Layers",{"slug":5,"title":6},"ml\u002Fimage_processing","Image Processing",{"file":8,"title":9,"date":10,"summary":11,"tag":12,"toc":15,"body":16},"ml\u002F28-ml_validation.md","Validation in ML","Jan. 31, 2023","Cross Validation",[13,14],"validation","ML","\u003Ch4\u003EContents\u003C\u002Fh4\u003E\u003Cp class=\"toc-h2\"\u003E\u003Ca href=\"#stratified-group-k-fold\"\u003EStratified Group K-Fold\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003Cp class=\"toc-h3\"\u003E\u003Ca href=\"#original-code-with-explanation\"\u003EOriginal code with explanation\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003Cp class=\"toc-h3\"\u003E\u003Ca href=\"#summary-with-metaphor\"\u003ESummary with metaphor\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003Cp class=\"toc-h3\"\u003E\u003Ca href=\"#optimized-code-with-numpy-and-pandas\"\u003EOptimized code with numpy and pandas\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003Cp class=\"toc-h3\"\u003E\u003Ca href=\"#check-distributions-of-splited-data\"\u003ECheck distributions of splited data\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003Cp class=\"toc-h3\"\u003E\u003Ca href=\"#optimized-code-with-numpy-and-polars\"\u003EOptimized code with numpy and polars\u003C\u002Fa\u003E\u003C\u002Fp\u003E","\u003Ch2 id=\"stratified-group-k-fold\"\u003EStratified Group K-Fold\u003Ca href=\"#stratified-group-k-fold\" class=\"anchor\"\u003E\u003Cspan class=\"visually-hidden\"\u003E#\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\u003Cp\u003EOriginal Code: \u003Ca href=\"https:\u002F\u002Fwww.kaggle.com\u002Fjakubwasikowski\u002Fstratified-group-k-fold-cross-validation\"\u003Ejakubwasikowski’s code\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003Ch3 id=\"original-code-with-explanation\"\u003EOriginal code with explanation\u003Ca href=\"#original-code-with-explanation\" class=\"anchor\"\u003E\u003Cspan class=\"visually-hidden\"\u003E#\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fh3\u003E\u003Cdiv class=\"code-block python\"\u003E\u003Cpre class='language-python'\u003E\u003Ccode\u003E\u003Cspan class=\"token comment\"\u003E# %%timeit\u003C\u002Fspan\u003E\n\u003Cspan class=\"token comment\"\u003E# 7.23 s ± 141 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\u003C\u002Fspan\u003E\n\nlabels_num \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E np\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Emax\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ey\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E+\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E  \u003Cspan class=\"token comment\"\u003E# label이 0~9로 구성이 되어 있어 최대 값에 1을 더해 label 개수를 파악합니다.\u003C\u002Fspan\u003E\n\u003Cspan class=\"token comment\"\u003E# 각 image 별로 label 개수를 확인하기 위해 지정합니다.\u003C\u002Fspan\u003E\ny_counts_per_group \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E defaultdict\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token keyword\"\u003Elambda\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E np\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Ezeros\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Elabels_num\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E  \u003Cspan class=\"token comment\"\u003E# dict shape: (n_image, n_label)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token comment\"\u003E# 각 label 별 개수를 확인하기 위해 지정합니다.\u003C\u002Fspan\u003E\ny_distr \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E Counter\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token comment\"\u003E# annotation 데이터를 이용해 순차적으로 데이터를 확인합니다.\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Efor\u003C\u002Fspan\u003E label\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E g \u003Cspan class=\"token keyword\"\u003Ein\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin\"\u003Ezip\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ey\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E groups\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E\n    y_counts_per_group\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003Eg\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003Elabel\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E+=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E\n    y_distr\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003Elabel\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E+=\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E\n\ny_counts_per_fold \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E defaultdict\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token keyword\"\u003Elambda\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E np\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Ezeros\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Elabels_num\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E  \u003Cspan class=\"token comment\"\u003E# fold별 각 label 개수를 파악하기 위해 지정합니다.\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token comment\"\u003E# 어떤 image가 특정 fold에 속할 때 전체 fold의 std 값 확인하는 함수입니다.\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Edef\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Eeval_y_counts_per_fold\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ey_counts\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E fold\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E\n    y_counts_per_fold\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003Efold\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E+=\u003C\u002Fspan\u003E y_counts  \u003Cspan class=\"token comment\"\u003E# image가 특정 fold에 속한 것을 반영합니다.\u003C\u002Fspan\u003E\n    std_per_label \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token comment\"\u003E# label 별로 전체 fold에 대해 std 값을 확인합니다.\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token keyword\"\u003Efor\u003C\u002Fspan\u003E label \u003Cspan class=\"token keyword\"\u003Ein\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin\"\u003Erange\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Elabels_num\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E# label 별로 개수가 다르기 때문에 scale을 맞추기 위해 각 label 별 총 개수로 나누어 줍니다.\u003C\u002Fspan\u003E\n        label_std \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E np\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Estd\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003Ey_counts_per_fold\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003Ei\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003Elabel\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E\u002F\u003C\u002Fspan\u003E y_distr\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003Elabel\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Efor\u003C\u002Fspan\u003E i \u003Cspan class=\"token keyword\"\u003Ein\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin\"\u003Erange\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ek\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n        std_per_label\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Eappend\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Elabel_std\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token comment\"\u003E# 본 함수는 해당 image가 특정 fold에 속한 것을 가정하고 계산합니다. 해당 image가 특정 fold에 속하지 않을 수 있기 때문에 원상 복구 합니다.\u003C\u002Fspan\u003E\n    y_counts_per_fold\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003Efold\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E-=\u003C\u002Fspan\u003E y_counts\n    \u003Cspan class=\"token comment\"\u003E# label별 std를 평균냅니다.\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E np\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Emean\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Estd_per_label\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token comment\"\u003E# image당 각 label 개수에 대한 값들만 활용합니다.\u003C\u002Fspan\u003E\ngroups_and_y_counts \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin\"\u003Elist\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ey_counts_per_group\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Eitems\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token comment\"\u003E# shuffle 후 sort 하는 것이 이상해 보이지만, sort 하였을 때 같은 std 값일 경우 순서가 달라지게 됩니다.\u003C\u002Fspan\u003E\nrandom\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003ERandom\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eseed\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Eshuffle\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Egroups_and_y_counts\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\ngroups_per_fold \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E defaultdict\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Eset\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E  \u003Cspan class=\"token comment\"\u003E# 각 fold별 index를 저장하기 위해 지정합니다.\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token comment\"\u003E# 큰 std를 가진 image부터 순차적으로 best fold를 찾습니다.\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Efor\u003C\u002Fspan\u003E g\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E y_counts \u003Cspan class=\"token keyword\"\u003Ein\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin\"\u003Esorted\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Egroups_and_y_counts\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E key\u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E\u003Cspan class=\"token keyword\"\u003Elambda\u003C\u002Fspan\u003E x\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E-\u003C\u002Fspan\u003Enp\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Estd\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ex\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E\n    best_fold \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token boolean\"\u003ENone\u003C\u002Fspan\u003E\n    min_eval \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token boolean\"\u003ENone\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token comment\"\u003E# image가 어떤 fold에 속할 때 가장 낮은 std를 가지는지 확인하는 과정입니다.\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token keyword\"\u003Efor\u003C\u002Fspan\u003E i \u003Cspan class=\"token keyword\"\u003Ein\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin\"\u003Erange\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ek\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E  \u003Cspan class=\"token comment\"\u003E# 각 fold에 대해 순차적으로 확인합니다.\u003C\u002Fspan\u003E\n        fold_eval \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E eval_y_counts_per_fold\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ey_counts\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E i\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E  \u003Cspan class=\"token comment\"\u003E# 전체 fold에 대해 std값 확인.\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E# std 값이 가장 낮을 때가 best fold 입니다.\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token keyword\"\u003Eif\u003C\u002Fspan\u003E min_eval \u003Cspan class=\"token keyword\"\u003Eis\u003C\u002Fspan\u003E \u003Cspan class=\"token boolean\"\u003ENone\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Eor\u003C\u002Fspan\u003E fold_eval \u003Cspan class=\"token operator\"\u003E&lt;\u003C\u002Fspan\u003E min_eval\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E\n            min_eval \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E fold_eval\n            best_fold \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E i\n    y_counts_per_fold\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003Ebest_fold\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E+=\u003C\u002Fspan\u003E y_counts  \u003Cspan class=\"token comment\"\u003E# best fold를 확정하고 해당 image를 반영합니다.\u003C\u002Fspan\u003E\n    groups_per_fold\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003Ebest_fold\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Eadd\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eg\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E  \u003Cspan class=\"token comment\"\u003E# best fold에 해당 이미지의 index를 추가합니다.\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\u003Ch3 id=\"summary-with-metaphor\"\u003ESummary with metaphor\u003Ca href=\"#summary-with-metaphor\" class=\"anchor\"\u003E\u003Cspan class=\"visually-hidden\"\u003E#\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fh3\u003E\u003Cp\u003E다양한 크기의 감자(image)를 수확했습니다. (갑자기?) 우리는 이것을 5개 상자(fold)에 나누어 담아야 합니다.\u003C\u002Fp\u003E\n\u003Cp\u003E하지만! 5개의 상자에 다양한 크기의 감자들이 골고루 담겨야 하며, 5개 상자 무게 모두 동일해야 합니다. (예?!)\u003C\u002Fp\u003E\n\u003Cp\u003E다양한 크기의 감자를 상자에 넣기 위해서는 큰 감자는 가장 먼저 넣는게 좋을 것 같네요.\u003C\u002Fp\u003E\n\u003Cp\u003E큰 감자는 나중에 넣게 되면 쉽게 넘칠 수 있고 무게 또한 많이 달라지기 때문에 가장 먼저 넣는게 좋을 것 같습니다. 정리를 할 때도 큰 것을 먼저 배치하면 좋다고 하니까요..\u003C\u002Fp\u003E\n\u003Cp\u003E큰 감자부터 순서대로 차곡차곡 상자에 담습니다. 중간 중간 무게도 확인하면서요.\u003C\u002Fp\u003E\n\u003Cp\u003E그 결과 상자별 감자 개수는 다를지 몰라도 다양한 크기를 가진 감자들이 균일하게 담긴 것 같네요.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Cimg src=\"https:\u002F\u002Fs3-us-west-2.amazonaws.com\u002Faistages-prod-server-public\u002Fapp\u002FUsers\u002F00000526\u002Ffiles\u002F54c3f53b-8534-49f9-a594-d6aeffae568f..png\" alt=\"https:\u002F\u002Fs3-us-west-2.amazonaws.com\u002Faistages-prod-server-public\u002Fapp\u002FUsers\u002F00000526\u002Ffiles\u002F54c3f53b-8534-49f9-a594-d6aeffae568f..png\"\u003E\u003C\u002Fp\u003E\n\u003Cp\u003E그렇군요. 감자하게도 잘 된 것 같네요. :ㅇ\u003C\u002Fp\u003E\n\u003Cp\u003E(정확한 설명은 아니지만 이런 뉘앙스를 가진다 이해해주시면 감사하겠습니다.)\u003C\u002Fp\u003E\n\u003Cp\u003E마지막으로 좀 더 선별을 잘 하기 위해 최신 저울(pandas, numpy)을 도입하기로 했습니다.\u003C\u002Fp\u003E\n\u003Ch3 id=\"optimized-code-with-numpy-and-pandas\"\u003EOptimized code with numpy and pandas\u003Ca href=\"#optimized-code-with-numpy-and-pandas\" class=\"anchor\"\u003E\u003Cspan class=\"visually-hidden\"\u003E#\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fh3\u003E\u003Cdiv class=\"code-block python\"\u003E\u003Cpre class='language-python'\u003E\u003Ccode\u003E\u003Cspan class=\"token comment\"\u003E# %%timeit\u003C\u002Fspan\u003E\n\u003Cspan class=\"token comment\"\u003E# 838 ms ± 28.1 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\u003C\u002Fspan\u003E\n\nlabels_num \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E y\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Emax\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E+\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E\n\u003Cspan class=\"token comment\"\u003E# https:\u002F\u002Fstackoverflow.com\u002Fa\u002F39132900\u002F14019325\u003C\u002Fspan\u003E\n\u003Cspan class=\"token comment\"\u003E# 기존 코드의 첫번째 loop와 동일합니다. 각 image 별 label 개수를 확인합니다.\u003C\u002Fspan\u003E\ny_counts_per_group \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E df\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Egroupby\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'image_id'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E'category_id'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Esize\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Eunstack\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Efill_value\u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\ny_counts_per_fold \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E np\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Ezeros\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ek\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E labels_num\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token comment\"\u003E# scale을 미리 계산하여 연산을 줄입니다.\u003C\u002Fspan\u003E\ny_norm_counts_per_group \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E y_counts_per_group \u003Cspan class=\"token operator\"\u003E\u002F\u003C\u002Fspan\u003E y_counts_per_group\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Esum\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"token comment\"\u003E# suffle &amp; sort\u003C\u002Fspan\u003E\nshuffled_and_sorted_index \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E y_norm_counts_per_group\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Esample\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Efrac\u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E random_state\u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003Eseed\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Estd\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eaxis\u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Esort_values\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eascending\u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E\u003Cspan class=\"token boolean\"\u003EFalse\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Eindex\ny_norm_counts_per_group \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E y_norm_counts_per_group\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Eloc\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003Eshuffled_and_sorted_index\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\n\ngroups_per_fold \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E defaultdict\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Eset\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Efor\u003C\u002Fspan\u003E g\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E y_counts \u003Cspan class=\"token keyword\"\u003Ein\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin\"\u003Ezip\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ey_norm_counts_per_group\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Eindex\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E y_norm_counts_per_group\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Evalues\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E\n    best_fold \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token boolean\"\u003ENone\u003C\u002Fspan\u003E\n    min_eval \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token boolean\"\u003ENone\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token keyword\"\u003Efor\u003C\u002Fspan\u003E fold_i \u003Cspan class=\"token keyword\"\u003Ein\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin\"\u003Erange\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ek\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E# 기존 코드 eval_y_counts_per_fold 와 동일합니다.\u003C\u002Fspan\u003E\n        y_counts_per_fold\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003Efold_i\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E+=\u003C\u002Fspan\u003E y_counts\n        fold_eval \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E y_counts_per_fold\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Estd\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eaxis\u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E\u003Cspan class=\"token number\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Emean\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E  \u003Cspan class=\"token comment\"\u003E# numpy를 활용하여 연산을 단순화 합니다.\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token comment\"\u003E# `.std(axis=0)` 각 label 별 std 계산 후 평균\u003C\u002Fspan\u003E\n        y_counts_per_fold\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003Efold_i\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E-=\u003C\u002Fspan\u003E y_counts\n        \u003Cspan class=\"token keyword\"\u003Eif\u003C\u002Fspan\u003E min_eval \u003Cspan class=\"token keyword\"\u003Eis\u003C\u002Fspan\u003E \u003Cspan class=\"token boolean\"\u003ENone\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Eor\u003C\u002Fspan\u003E fold_eval \u003Cspan class=\"token operator\"\u003E&lt;\u003C\u002Fspan\u003E min_eval\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E\n            min_eval \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E fold_eval\n            best_fold \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E fold_i\n    y_counts_per_fold\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003Ebest_fold\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E+=\u003C\u002Fspan\u003E y_counts\n    groups_per_fold\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003Ebest_fold\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Eadd\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eg\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\u003Cp\u003E최신 저울을 추가했더니 속도가 확실히 빨라졌네요. 7.23s –&gt; 0.84s 로 개선이 됐습니다.\u003C\u002Fp\u003E\n\u003Cp\u003Epandas와 numpy를 활용해 loop 수를 최소화 하여 간략화 한것이 도움이 됐습니다.\u003C\u002Fp\u003E\n\u003Ch3 id=\"check-distributions-of-splited-data\"\u003ECheck distributions of splited data\u003Ca href=\"#check-distributions-of-splited-data\" class=\"anchor\"\u003E\u003Cspan class=\"visually-hidden\"\u003E#\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fh3\u003E\u003Cdiv class=\"code-block python\"\u003E\u003Cpre class='language-python'\u003E\u003Ccode\u003E\u003Cspan class=\"token keyword\"\u003Edef\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Eget_distribution\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ey_vals\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E\n        y_distr \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E Counter\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ey_vals\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n        y_vals_sum \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin\"\u003Esum\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ey_distr\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Evalues\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n        \u003Cspan class=\"token keyword\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token string-interpolation\"\u003E\u003Cspan class=\"token string\"\u003Ef'\u003C\u002Fspan\u003E\u003Cspan class=\"token interpolation\"\u003E\u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003Ey_distr\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003Ei\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E\u002F\u003C\u002Fspan\u003E y_vals_sum\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E\u003Cspan class=\"token format-spec\"\u003E.2%\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Efor\u003C\u002Fspan\u003E i \u003Cspan class=\"token keyword\"\u003Ein\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin\"\u003Erange\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Enp\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Emax\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ey_vals\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E+\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\n\nall_groups \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin\"\u003Eset\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Egroups\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\ndistrs \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003Eget_distribution\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ey\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\nindex \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'training set'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Efor\u003C\u002Fspan\u003E i \u003Cspan class=\"token keyword\"\u003Ein\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin\"\u003Erange\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ek\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E\n    train_groups \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E all_groups \u003Cspan class=\"token operator\"\u003E-\u003C\u002Fspan\u003E groups_per_fold\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003Ei\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\n    test_groups \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E groups_per_fold\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003Ei\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\n\n    train_df \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E df\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Eloc\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003Edf\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'image_id'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Eisin\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Etrain_groups\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\n    valid_df \u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E df\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Eloc\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003Edf\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'image_id'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Eisin\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Etest_groups\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\n\n    distrs\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Eappend\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eget_distribution\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Etrain_df\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'category_id'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Evalues\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n    index\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Eappend\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string-interpolation\"\u003E\u003Cspan class=\"token string\"\u003Ef'train set - fold \u003C\u002Fspan\u003E\u003Cspan class=\"token interpolation\"\u003E\u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003Ei \u003Cspan class=\"token operator\"\u003E+\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n    distrs\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Eappend\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Eget_distribution\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Evalid_df\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'category_id'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Evalues\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n    index\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003Eappend\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string-interpolation\"\u003E\u003Cspan class=\"token string\"\u003Ef'validation set - fold \u003C\u002Fspan\u003E\u003Cspan class=\"token interpolation\"\u003E\u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003Ei \u003Cspan class=\"token operator\"\u003E+\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token keyword\"\u003Eprint\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'Distribution per class:'\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\npd\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003EDataFrame\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Edistrs\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E index\u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003Eindex\u003Cspan class=\"token punctuation\"\u003E,\u003C\u002Fspan\u003E columns\u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"token string-interpolation\"\u003E\u003Cspan class=\"token string\"\u003Ef'Label \u003C\u002Fspan\u003E\u003Cspan class=\"token interpolation\"\u003E\u003Cspan class=\"token punctuation\"\u003E{\u003C\u002Fspan\u003El\u003Cspan class=\"token punctuation\"\u003E}\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E'\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Efor\u003C\u002Fspan\u003E l \u003Cspan class=\"token keyword\"\u003Ein\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin\"\u003Erange\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Enp\u003Cspan class=\"token punctuation\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"token builtin\"\u003Emax\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E(\u003C\u002Fspan\u003Ey\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"token operator\"\u003E+\u003C\u002Fspan\u003E \u003Cspan class=\"token number\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E)\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\u003Ch3 id=\"optimized-code-with-numpy-and-polars\"\u003EOptimized code with numpy and polars\u003Ca href=\"#optimized-code-with-numpy-and-polars\" class=\"anchor\"\u003E\u003Cspan class=\"visually-hidden\"\u003E#\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fh3\u003E\u003Cp\u003ENot yet implemented.\u003C\u002Fp\u003E\n"],"uses":{"params":["path","slug"]}}]}
