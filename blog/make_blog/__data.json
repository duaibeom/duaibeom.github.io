{"type":"data","nodes":[null,{"type":"data","data":[{"prev":1,"next":4,"section":7},{"slug":2,"title":3},"blog\u002Fplot","Plot",{"slug":5,"title":6},"blog\u002Fai_safety","AI Safety",{"file":8,"title":9,"date":10,"summary":-1,"tag":11,"toc":15,"body":16},"blog\u002F14-make_blog.md","블로그 생성","Mar. 18, 2020",[12,13,14],"blog","hugo","svelte-kit","\u003Ch4\u003EContents\u003C\u002Fh4\u003E\u003Cp class=\"toc-h2\"\u003E\u003Ca href=\"#svelte-kit\"\u003ESvelte-kit\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003Cp class=\"toc-h2\"\u003E\u003Ca href=\"#hugo-블로그-생성-wgithub\"\u003EHUGO 블로그 생성 w\u002FGitHub\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003Cp class=\"toc-h3\"\u003E\u003Ca href=\"#hugo-설치\"\u003E\u003Ca href=\"https:\u002F\u002Fgohugo.io\u002Fgetting-started\u002Finstalling\u002F\"\u003EHugo 설치\u003C\u002Fa\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003Cp class=\"toc-h3\"\u003E\u003Ca href=\"#hugo로-블로그-생성\"\u003EHugo로 블로그 생성\u003C\u002Fa\u003E\u003C\u002Fp\u003E","\u003Ch2 id=\"svelte-kit\"\u003ESvelte-kit\u003Ca href=\"#svelte-kit\" class=\"anchor\"\u003E\u003Cspan class=\"visually-hidden\"\u003E#\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\u003Ch2 id=\"hugo-블로그-생성-wgithub\"\u003EHUGO 블로그 생성 w\u002FGitHub\u003Ca href=\"#hugo-블로그-생성-wgithub\" class=\"anchor\"\u003E\u003Cspan class=\"visually-hidden\"\u003E#\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fh2\u003E\u003Cblockquote\u003E\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fgohugo.io\u002F\"\u003EHugo\u003C\u002Fa\u003E is a fast and modern static site generator written in Go, and designed to make website creation fun again.\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Ch3 id=\"hugo-설치\"\u003E\u003Ca href=\"https:\u002F\u002Fgohugo.io\u002Fgetting-started\u002Finstalling\u002F\"\u003EHugo 설치\u003C\u002Fa\u003E\u003Ca href=\"#hugo-설치\" class=\"anchor\"\u003E\u003Cspan class=\"visually-hidden\"\u003E#\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fh3\u003E\u003Cul\u003E\n\u003Cli\u003EMacOS - \u003Ccode\u003Ebrew install hugo\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003Cli\u003EUbuntu - \u003Ccode\u003Esnap install hugo\u003C\u002Fcode\u003E\u003Cul\u003E\n\u003Cli\u003E주의 - apt로 설치하면 구버전이 설치된다. snap을 이용하면 최신 버전으로 다운이 가능하다.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003EWindow - ?\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003E자세한 정보는 Hugo Docs의 Install Hugo 참조.\u003C\u002Fp\u003E\n\u003Ch3 id=\"hugo로-블로그-생성\"\u003EHugo로 블로그 생성\u003Ca href=\"#hugo로-블로그-생성\" class=\"anchor\"\u003E\u003Cspan class=\"visually-hidden\"\u003E#\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fh3\u003E\u003Cp\u003E\u003Ccode\u003Ehugo version\u003C\u002Fcode\u003E 을 통해 작동이 가능한지 확인한다.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Ehugo new site blog\u003C\u002Fcode\u003E 기본 Hugo site 파일을 생성한다.\u003C\u002Fp\u003E\n\u003Cp\u003EGitHub를 이용해 블로그를 만들기 위해서는 두개의 repository가 필요하다.\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Ccode\u003E&lt;USERNAME&gt;.github.io\u003C\u002Fcode\u003E 와 \u003Ccode\u003E&lt;YOUR-PROJECT&gt;\u003C\u002Fcode\u003E repository 두개를 생성한다.\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003E&lt;USERNAME&gt;.github.io\u003C\u002Fcode\u003E 는 GitHub Page 기본 주소 양식이다. 이곳에 Hugo로 생성된 html 파일들이 올라 갈 것이다.\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ccode\u003E&lt;YOUR-PROJECT&gt;\u003C\u002Fcode\u003E 는 Hugo의 기본 페이지 파일들과 작성된 파일(Post)이 올라갈 것이다.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003E\u003Ccode\u003Ecd blog\u003C\u002Fcode\u003E 생성한 DIR로 이동한다. 지금의 예에서는 \u003Ccode\u003E&lt;YOUR-PROJECT&gt;\u003C\u002Fcode\u003E가 \u003Ccode\u003Eblog\u003C\u002Fcode\u003E인 경우이다.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Egit init\u003C\u002Fcode\u003E git 필수파일을 생성한다.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Egit submodule add https:\u002F\u002Fgithub.com\u002Fvividvilla\u002Fezhil.git themes\u002Fezhil\u003C\u002Fcode\u003E Hugo로 생성된 themes 안에 원하는 thems의 GitHub를 가져온다. 위와 같은 방법으로 하면 해당 GitHub repo가 업데이트 되면 해당 DIR로 가서 \u003Ccode\u003Egit pull\u003C\u002Fcode\u003E만 하면 자신의 테마가 업데이트 된다. clone 해서 전체 다 다시 가져올 필요가 없다.\u003C\u002Fp\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003EHugo의 테마들은 \u003Ca href=\"https:\u002F\u002Fthemes.gohugo.io\u002F\"\u003E여기\u003C\u002Fa\u003E서 볼 수 있다.\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Cp\u003E\u003Ccode\u003Ehugo new posts\u002Fmy-first-post.md\u003C\u002Fcode\u003E 로 첫 post를 작성한다. 생성되는 기본 format은 \u003Ccode\u003Earchetypes\u002Fdefault.md\u003C\u002Fcode\u003E 을 이용한다.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003Ehugo server -D\u003C\u002Fcode\u003E 를 이용해 생성할 사이트를 미리 볼 수 있다. \u003Ccode\u003Ehttp:\u002F\u002Flocalhost:1313\u002F\u003C\u002Fcode\u003E 가 미리보기 주소이다.\u003C\u002Fp\u003E\n\u003Cp\u003E만족할 결과가 나왔는가? 그렇다면 GitHub에 여러분의 Page를 올려보자. 그 전에 \u003Ccode\u003Epublic\u002F\u003C\u002Fcode\u003E이 있는지 확인하고 있다면, \u003Ccode\u003Erm -rf public\u003C\u002Fcode\u003E로 지워준다.\u003C\u002Fp\u003E\n\u003Cblockquote\u003E\n\u003Cp\u003EHugo는 \u003Ccode\u003E&lt;YOUR-PROJECT&gt;\u003C\u002Fcode\u003E 안의 파일을 이용해 \u003Ccode\u003E&lt;YOUR-PROJECT&gt;\u002Fpublic\u003C\u002Fcode\u003E 에 html (blog page) 파일이 생성된다.\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Cp\u003E\u003Ccode\u003Egit submodule add -b master https:\u002F\u002Fgithub.com\u002F&lt;USERNAME&gt;\u002F&lt;USERNAME&gt;.github.io.git public\u003C\u002Fcode\u003E 로 작업 repo의 public을 \u003Ccode\u003E&lt;USERNAME&gt;.github.io.git\u003C\u002Fcode\u003E 과 연동한다.\u003C\u002Fp\u003E\n\u003Cp\u003E아래의 \u003Ccode\u003Edeploy.sh\u003C\u002Fcode\u003E 을 이용해 간편하게 GitHub에 업데이트를 할 수 있다. (hugo에서 제공하는 script)\u003C\u002Fp\u003E\n\u003Cdiv class=\"code-block bash\"\u003E\u003Cpre class='language-bash'\u003E\u003Ccode\u003E\u003Cspan class=\"token shebang important\"\u003E#!\u002Fbin\u002Fsh\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token comment\"\u003E# If a command fails then the deploy stops\u003C\u002Fspan\u003E\n\u003Cspan class=\"token builtin class-name\"\u003Eset\u003C\u002Fspan\u003E \u003Cspan class=\"token parameter variable\"\u003E-e\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token builtin class-name\"\u003Eprintf\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"\u003Cspan class=\"token entity\" title=\"\\033\"\u003E\\033\u003C\u002Fspan\u003E[0;32mDeploying updates to GitHub...\u003Cspan class=\"token entity\" title=\"\\033\"\u003E\\033\u003C\u002Fspan\u003E[0m\u003Cspan class=\"token entity\" title=\"\\n\"\u003E\\n\u003C\u002Fspan\u003E\"\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token comment\"\u003E# Build the project.\u003C\u002Fspan\u003E\nhugo \u003Cspan class=\"token comment\"\u003E# if using a theme, replace with `hugo -t &lt;YOURTHEME\u003E`\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token comment\"\u003E# Go To Public folder\u003C\u002Fspan\u003E\n\u003Cspan class=\"token builtin class-name\"\u003Ecd\u003C\u002Fspan\u003E public\n\n\u003Cspan class=\"token comment\"\u003E# Add changes to git.\u003C\u002Fspan\u003E\n\u003Cspan class=\"token function\"\u003Egit\u003C\u002Fspan\u003E \u003Cspan class=\"token function\"\u003Eadd\u003C\u002Fspan\u003E \u003Cspan class=\"token builtin class-name\"\u003E.\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token comment\"\u003E# Commit changes.\u003C\u002Fspan\u003E\n\u003Cspan class=\"token assign-left variable\"\u003Emsg\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"rebuilding site \u003Cspan class=\"token variable\"\u003E\u003Cspan class=\"token variable\"\u003E$(\u003C\u002Fspan\u003E\u003Cspan class=\"token function\"\u003Edate\u003C\u002Fspan\u003E\u003Cspan class=\"token variable\"\u003E)\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\"\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Eif\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E[\u003C\u002Fspan\u003E \u003Cspan class=\"token parameter variable\"\u003E-n\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"\u003Cspan class=\"token variable\"\u003E$*\u003C\u002Fspan\u003E\"\u003C\u002Fspan\u003E \u003Cspan class=\"token punctuation\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"token keyword\"\u003Ethen\u003C\u002Fspan\u003E\n    \u003Cspan class=\"token assign-left variable\"\u003Emsg\u003C\u002Fspan\u003E\u003Cspan class=\"token operator\"\u003E=\u003C\u002Fspan\u003E\u003Cspan class=\"token string\"\u003E\"\u003Cspan class=\"token variable\"\u003E$*\u003C\u002Fspan\u003E\"\u003C\u002Fspan\u003E\n\u003Cspan class=\"token keyword\"\u003Efi\u003C\u002Fspan\u003E\n\u003Cspan class=\"token function\"\u003Egit\u003C\u002Fspan\u003E commit \u003Cspan class=\"token parameter variable\"\u003E-m\u003C\u002Fspan\u003E \u003Cspan class=\"token string\"\u003E\"\u003Cspan class=\"token variable\"\u003E$msg\u003C\u002Fspan\u003E\"\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"token comment\"\u003E# Push source and build repos.\u003C\u002Fspan\u003E\n\u003Cspan class=\"token function\"\u003Egit\u003C\u002Fspan\u003E push origin master\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\u003Cblockquote\u003E\n\u003Cp\u003E원하는 포스트를 작성하고 \u003Ccode\u003Edeploy.sh\u003C\u002Fcode\u003E 를 실행하면 된다. 자동으로 \u003Ccode\u003E&lt;USERNAME&gt;.github.io.git\u003C\u002Fcode\u003E 에 업데이트가 된다. \u003Ccode\u003E&lt;YOUR-PROJECT&gt;\u003C\u002Fcode\u003E 는 일종의 재료 파일들이기 때문에 GitHub에 매번 \u003Ccode\u003Epush\u003C\u002Fcode\u003E할 필요는 없다.\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Cp\u003Ejekyll에 비해 초기 설정은 다소 어려웠다. 하지만, blog contents를 작성, 관리에는 hugo가 더 편리하다.\u003C\u002Fp\u003E\n\u003Cp\u003Eblog의 색상이나 메뉴 변경은 \u003Ccode\u003Econfig.toml\u003C\u002Fcode\u003E이나 \u003Ccode\u003Ecss\u003C\u002Fcode\u003E안의 내용을 변경하면 가능합니다.\u003C\u002Fp\u003E\n\u003Cp\u003E\u003Ccode\u003E.\u002Fstatic\u002Fcss\u003C\u002Fcode\u003E에서 색 변경이 가능하다.\u003C\u002Fp\u003E\n"],"uses":{"params":["path","slug"]}}]}
